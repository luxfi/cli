// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/z/go/pkg/mod/github.com/zondax/hid@v0.9.2/wchar.go:1:1
// This file is https://github.com/orofarne/gowchar/blob/master/gowchar.go
//
// It was vendored inline to work around CGO limitations that don't allow C types
// to directly cross package API boundaries.
//
// The vendored file is licensed under the 3-clause BSD license, according to:
// https://github.com/orofarne/gowchar/blob/master/LICENSE

// +build !ios
// +build linux darwin windows

package hid

/*
#include <wchar.h>

const size_t SIZEOF_WCHAR_T = sizeof(wchar_t);

void gowchar_set (wchar_t *arr, int pos, wchar_t val)
{
	arr[pos] = val;
}

wchar_t gowchar_get (wchar_t *arr, int pos)
{
	return arr[pos];
}
*/
import _ "unsafe"

import (
	"fmt"
	"unicode/utf16"
	"unicode/utf8"
)

var sizeofWcharT  /*line :37:18*/_Ctype_size_t /*line :37:26*/ =  /*line :37:29*/_Ctype_size_t /*line :37:37*/(( /*line :37:38*/_Ciconst_SIZEOF_WCHAR_T /*line :37:53*/))

func stringToWcharT(s string) (* /*line :39:33*/_Ctype_wchar_t /*line :39:42*/,  /*line :39:44*/_Ctype_size_t /*line :39:52*/) {
	switch sizeofWcharT {
	case 2:
		return stringToWchar2(s) // Windows
	case 4:
		return stringToWchar4(s) // Unix
	default:
		panic(fmt.Sprintf("Invalid sizeof(wchar_t) = %v", sizeofWcharT))
	}
}

func wcharTToString(s * /*line :50:24*/_Ctype_wchar_t /*line :50:33*/) (string, error) {
	switch sizeofWcharT {
	case 2:
		return wchar2ToString(s) // Windows
	case 4:
		return wchar4ToString(s) // Unix
	default:
		panic(fmt.Sprintf("Invalid sizeof(wchar_t) = %v", sizeofWcharT))
	}
}

func wcharTNToString(s * /*line :61:25*/_Ctype_wchar_t /*line :61:34*/, size  /*line :61:41*/_Ctype_size_t /*line :61:49*/) (string, error) {
	switch sizeofWcharT {
	case 2:
		return wchar2NToString(s, size) // Windows
	case 4:
		return wchar4NToString(s, size) // Unix
	default:
		panic(fmt.Sprintf("Invalid sizeof(wchar_t) = %v", sizeofWcharT))
	}
}

// Windows
func stringToWchar2(s string) (* /*line :73:33*/_Ctype_wchar_t /*line :73:42*/,  /*line :73:44*/_Ctype_size_t /*line :73:52*/) {
	var slen int
	s1 := s
	for len(s1) > 0 {
		r, size := utf8.DecodeRuneInString(s1)
		if er, _ := utf16.EncodeRune(r); er == '\uFFFD' {
			slen += 1
		} else {
			slen += 2
		}
		s1 = s1[size:]
	}
	slen++ // \0
	res := ( /*line :86:9*/_Cfunc__CMalloc /*line :86:16*/)( /*line :86:18*/_Ctype_size_t /*line :86:26*/(slen) * sizeofWcharT)
	var i int
	for len(s) > 0 {
		r, size := utf8.DecodeRuneInString(s)
		if r1, r2 := utf16.EncodeRune(r); r1 != '\uFFFD' {
			( /*line :91:4*/_Cfunc_gowchar_set /*line :91:16*/)((* /*line :91:20*/_Ctype_wchar_t /*line :91:29*/)(res),  /*line :91:37*/_Ctype_int /*line :91:42*/(i),  /*line :91:47*/_Ctype_wchar_t /*line :91:56*/(r1))
			i++
			( /*line :93:4*/_Cfunc_gowchar_set /*line :93:16*/)((* /*line :93:20*/_Ctype_wchar_t /*line :93:29*/)(res),  /*line :93:37*/_Ctype_int /*line :93:42*/(i),  /*line :93:47*/_Ctype_wchar_t /*line :93:56*/(r2))
			i++
		} else {
			( /*line :96:4*/_Cfunc_gowchar_set /*line :96:16*/)((* /*line :96:20*/_Ctype_wchar_t /*line :96:29*/)(res),  /*line :96:37*/_Ctype_int /*line :96:42*/(i),  /*line :96:47*/_Ctype_wchar_t /*line :96:56*/(r))
			i++
		}
		s = s[size:]
	}
	( /*line :101:2*/_Cfunc_gowchar_set /*line :101:14*/)((* /*line :101:18*/_Ctype_wchar_t /*line :101:27*/)(res),  /*line :101:35*/_Ctype_int /*line :101:40*/(slen-1),  /*line :101:50*/_Ctype_wchar_t /*line :101:59*/(0)) // \0
	return (* /*line :102:11*/_Ctype_wchar_t /*line :102:20*/)(res),  /*line :102:28*/_Ctype_size_t /*line :102:36*/(slen)
}

// Unix
func stringToWchar4(s string) (* /*line :106:33*/_Ctype_wchar_t /*line :106:42*/,  /*line :106:44*/_Ctype_size_t /*line :106:52*/) {
	slen := utf8.RuneCountInString(s)
	slen++ // \0
	res := ( /*line :109:9*/_Cfunc__CMalloc /*line :109:16*/)( /*line :109:18*/_Ctype_size_t /*line :109:26*/(slen) * sizeofWcharT)
	var i int
	for len(s) > 0 {
		r, size := utf8.DecodeRuneInString(s)
		( /*line :113:3*/_Cfunc_gowchar_set /*line :113:15*/)((* /*line :113:19*/_Ctype_wchar_t /*line :113:28*/)(res),  /*line :113:36*/_Ctype_int /*line :113:41*/(i),  /*line :113:46*/_Ctype_wchar_t /*line :113:55*/(r))
		s = s[size:]
		i++
	}
	( /*line :117:2*/_Cfunc_gowchar_set /*line :117:14*/)((* /*line :117:18*/_Ctype_wchar_t /*line :117:27*/)(res),  /*line :117:35*/_Ctype_int /*line :117:40*/(slen-1),  /*line :117:50*/_Ctype_wchar_t /*line :117:59*/(0)) // \0
	return (* /*line :118:11*/_Ctype_wchar_t /*line :118:20*/)(res),  /*line :118:28*/_Ctype_size_t /*line :118:36*/(slen)
}

// Windows
func wchar2ToString(s * /*line :122:24*/_Ctype_wchar_t /*line :122:33*/) (string, error) {
	var i int
	var res string
	for {
		ch := ( /*line :126:9*/_Cfunc_gowchar_get /*line :126:21*/)(s,  /*line :126:26*/_Ctype_int /*line :126:31*/(i))
		if ch == 0 {
			break
		}
		r := rune(ch)
		i++
		if !utf16.IsSurrogate(r) {
			if !utf8.ValidRune(r) {
				err := fmt.Errorf("Invalid rune at position %v", i)
				return "", err
			}
			res += string(r)
		} else {
			ch2 := ( /*line :139:11*/_Cfunc_gowchar_get /*line :139:23*/)(s,  /*line :139:28*/_Ctype_int /*line :139:33*/(i))
			r2 := rune(ch2)
			r12 := utf16.DecodeRune(r, r2)
			if r12 == '\uFFFD' {
				err := fmt.Errorf("Invalid surrogate pair at position %v", i-1)
				return "", err
			}
			res += string(r12)
			i++
		}
	}
	return res, nil
}

// Unix
func wchar4ToString(s * /*line :154:24*/_Ctype_wchar_t /*line :154:33*/) (string, error) {
	var i int
	var res string
	for {
		ch := ( /*line :158:9*/_Cfunc_gowchar_get /*line :158:21*/)(s,  /*line :158:26*/_Ctype_int /*line :158:31*/(i))
		if ch == 0 {
			break
		}
		r := rune(ch)
		if !utf8.ValidRune(r) {
			err := fmt.Errorf("Invalid rune at position %v", i)
			return "", err
		}
		res += string(r)
		i++
	}
	return res, nil
}

// Windows
func wchar2NToString(s * /*line :174:25*/_Ctype_wchar_t /*line :174:34*/, size  /*line :174:41*/_Ctype_size_t /*line :174:49*/) (string, error) {
	var i int
	var res string
	N := int(size)
	for i < N {
		ch := ( /*line :179:9*/_Cfunc_gowchar_get /*line :179:21*/)(s,  /*line :179:26*/_Ctype_int /*line :179:31*/(i))
		if ch == 0 {
			break
		}
		r := rune(ch)
		i++
		if !utf16.IsSurrogate(r) {
			if !utf8.ValidRune(r) {
				err := fmt.Errorf("Invalid rune at position %v", i)
				return "", err
			}

			res += string(r)
		} else {
			if i >= N {
				err := fmt.Errorf("Invalid surrogate pair at position %v", i-1)
				return "", err
			}
			ch2 := ( /*line :197:11*/_Cfunc_gowchar_get /*line :197:23*/)(s,  /*line :197:28*/_Ctype_int /*line :197:33*/(i))
			r2 := rune(ch2)
			r12 := utf16.DecodeRune(r, r2)
			if r12 == '\uFFFD' {
				err := fmt.Errorf("Invalid surrogate pair at position %v", i-1)
				return "", err
			}
			res += string(r12)
			i++
		}
	}
	return res, nil
}

// Unix
func wchar4NToString(s * /*line :212:25*/_Ctype_wchar_t /*line :212:34*/, size  /*line :212:41*/_Ctype_size_t /*line :212:49*/) (string, error) {
	var i int
	var res string
	N := int(size)
	for i < N {
		ch := ( /*line :217:9*/_Cfunc_gowchar_get /*line :217:21*/)(s,  /*line :217:26*/_Ctype_int /*line :217:31*/(i))
		r := rune(ch)
		if !utf8.ValidRune(r) {
			err := fmt.Errorf("Invalid rune at position %v", i)
			return "", err
		}
		res += string(r)
		i++
	}
	return res, nil
}

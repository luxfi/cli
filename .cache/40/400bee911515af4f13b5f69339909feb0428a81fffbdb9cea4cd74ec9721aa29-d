//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-g"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "CoreFoundation"
//go:cgo_ldflag "-framework"
//go:cgo_ldflag "IOKit"
// Code generated by cmd/cgo; DO NOT EDIT.

package hid

import "unsafe"

import "syscall"

import _cgopackage "runtime/cgo"

type _ _cgopackage.Incomplete
var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
//go:linkname _Cgo_keepalive runtime.cgoKeepAlive
//go:noescape
func _Cgo_keepalive(interface{})
//go:linkname _Cgo_no_callback runtime.cgoNoCallback
func _Cgo_no_callback(bool)
type _Ctype_CFIndex = _Ctype_long

type _Ctype_CFRunLoopRef uintptr

type _Ctype_CFRunLoopSourceRef uintptr

type _Ctype_CFStringRef uintptr

type _Ctype_CFTypeID = _Ctype_ulong

type _Ctype_IOHIDDeviceRef uintptr

type _Ctype__GoString_ string

type _Ctype___darwin_pthread_cond_t = _Ctype_struct__opaque_pthread_cond_t

type _Ctype___darwin_pthread_mutex_t = _Ctype_struct__opaque_pthread_mutex_t

type _Ctype___darwin_pthread_t *_Ctype_struct__opaque_pthread_t

type _Ctype_char int8

type _Ctype_hid_device = _Ctype_struct_hid_device_

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_long int64

type _Ctype_pthread_barrier_t = _Ctype_struct_pthread_barrier

type _Ctype_pthread_cond_t = _Ctype_struct__opaque_pthread_cond_t

type _Ctype_pthread_mutex_t = _Ctype_struct__opaque_pthread_mutex_t

type _Ctype_pthread_t = _Ctype___darwin_pthread_t

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct___CFRunLoop _cgopackage.Incomplete

type _Ctype_struct___CFRunLoopSource _cgopackage.Incomplete

type _Ctype_struct___CFString _cgopackage.Incomplete

type _Ctype_struct___IOHIDDevice _cgopackage.Incomplete

type _Ctype_struct___darwin_pthread_handler_rec struct {
	__routine	*[0]byte
	__arg		unsafe.Pointer
	__next		*_Ctype_struct___darwin_pthread_handler_rec
}

type _Ctype_struct__opaque_pthread_cond_t struct {
	__sig		_Ctype_long
	__opaque	[40]_Ctype_char
}

type _Ctype_struct__opaque_pthread_mutex_t struct {
	__sig		_Ctype_long
	__opaque	[56]_Ctype_char
}

type _Ctype_struct__opaque_pthread_t struct {
	__sig		_Ctype_long
	__cleanup_stack	*_Ctype_struct___darwin_pthread_handler_rec
	__opaque	[8176]_Ctype_char
}

type _Ctype_struct_hid_device_ struct {
	device_handle		_Ctype_IOHIDDeviceRef
	blocking		_Ctype_int
	uses_numbered_reports	_Ctype_int
	disconnected		_Ctype_int
	run_loop_mode		_Ctype_CFStringRef
	run_loop		_Ctype_CFRunLoopRef
	source			_Ctype_CFRunLoopSourceRef
	input_report_buf	*_Ctype_uint8_t
	max_input_report_len	_Ctype_CFIndex
	input_reports		*_Ctype_struct_input_report
	thread			_Ctype_pthread_t
	mutex			_Ctype_struct__opaque_pthread_mutex_t
	condition		_Ctype_struct__opaque_pthread_cond_t
	barrier			_Ctype_struct_pthread_barrier
	shutdown_barrier	_Ctype_struct_pthread_barrier
	shutdown_thread		_Ctype_int
	_			[4]byte
}

type _Ctype_struct_hid_device_info struct {
	path			*_Ctype_char
	vendor_id		_Ctype_ushort
	product_id		_Ctype_ushort
	serial_number		*_Ctype_wchar_t
	release_number		_Ctype_ushort
	manufacturer_string	*_Ctype_wchar_t
	product_string		*_Ctype_wchar_t
	usage_page		_Ctype_ushort
	usage			_Ctype_ushort
	interface_number	_Ctype_int
	next			*_Ctype_struct_hid_device_info
}

type _Ctype_struct_input_report struct {
	data	*_Ctype_uint8_t
	len	_Ctype_size_t
	next	*_Ctype_struct_input_report
}

type _Ctype_struct_pthread_barrier struct {
	mutex		_Ctype_struct__opaque_pthread_mutex_t
	cond		_Ctype_struct__opaque_pthread_cond_t
	count		_Ctype_int
	trip_count	_Ctype_int
}

type _Ctype_uchar uint8

type _Ctype_uint8_t = _Ctype_uchar

type _Ctype_ulong uint64

type _Ctype_ushort uint16

type _Ctype_wchar_t = _Ctype_int

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
//go:noescape
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
//go:noescape
func _cgoCheckResult(interface{})
const _Ciconst_SIZEOF_WCHAR_T = 0x4


// CString converts the Go string s to a C string.
//
// The C string is allocated in the C heap using malloc.
// It is the caller's responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func _Cfunc_CString(s string) *_Ctype_char {
	if len(s)+1 <= 0 {
		panic("string too large")
	}
	p := _cgo_cmalloc(uint64(len(s)+1))
	sliceHeader := struct {
		p   unsafe.Pointer
		len int
		cap int
	}{p, len(s)+1, len(s)+1}
	b := *(*[]byte)(unsafe.Pointer(&sliceHeader))
	copy(b, s)
	b[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

// GoString converts the C string p into a Go string.
func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_free
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_free _cgo_62402175b5df_Cfunc_free
var __cgofn__cgo_62402175b5df_Cfunc_free byte
var _cgo_62402175b5df_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_gowchar_get
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_gowchar_get _cgo_62402175b5df_Cfunc_gowchar_get
var __cgofn__cgo_62402175b5df_Cfunc_gowchar_get byte
var _cgo_62402175b5df_Cfunc_gowchar_get = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_gowchar_get)

//go:cgo_unsafe_args
func _Cfunc_gowchar_get(p0 *_Ctype_wchar_t, p1 _Ctype_int) (r1 _Ctype_wchar_t) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_gowchar_get, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_gowchar_set
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_gowchar_set _cgo_62402175b5df_Cfunc_gowchar_set
var __cgofn__cgo_62402175b5df_Cfunc_gowchar_set byte
var _cgo_62402175b5df_Cfunc_gowchar_set = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_gowchar_set)

//go:cgo_unsafe_args
func _Cfunc_gowchar_set(p0 *_Ctype_wchar_t, p1 _Ctype_int, p2 _Ctype_wchar_t) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_gowchar_set, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_close
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_close _cgo_62402175b5df_Cfunc_hid_close
var __cgofn__cgo_62402175b5df_Cfunc_hid_close byte
var _cgo_62402175b5df_Cfunc_hid_close = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_close)

//go:cgo_unsafe_args
func _Cfunc_hid_close(p0 *_Ctype_struct_hid_device_) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_close, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_enumerate
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_enumerate _cgo_62402175b5df_Cfunc_hid_enumerate
var __cgofn__cgo_62402175b5df_Cfunc_hid_enumerate byte
var _cgo_62402175b5df_Cfunc_hid_enumerate = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_enumerate)

//go:cgo_unsafe_args
func _Cfunc_hid_enumerate(p0 _Ctype_ushort, p1 _Ctype_ushort) (r1 *_Ctype_struct_hid_device_info) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_enumerate, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_error
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_error _cgo_62402175b5df_Cfunc_hid_error
var __cgofn__cgo_62402175b5df_Cfunc_hid_error byte
var _cgo_62402175b5df_Cfunc_hid_error = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_error)

//go:cgo_unsafe_args
func _Cfunc_hid_error(p0 *_Ctype_struct_hid_device_) (r1 *_Ctype_wchar_t) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_error, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_free_enumeration
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_free_enumeration _cgo_62402175b5df_Cfunc_hid_free_enumeration
var __cgofn__cgo_62402175b5df_Cfunc_hid_free_enumeration byte
var _cgo_62402175b5df_Cfunc_hid_free_enumeration = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_free_enumeration)

//go:cgo_unsafe_args
func _Cfunc_hid_free_enumeration(p0 *_Ctype_struct_hid_device_info) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_free_enumeration, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_open_path
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_open_path _cgo_62402175b5df_Cfunc_hid_open_path
var __cgofn__cgo_62402175b5df_Cfunc_hid_open_path byte
var _cgo_62402175b5df_Cfunc_hid_open_path = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_open_path)

//go:cgo_unsafe_args
func _Cfunc_hid_open_path(p0 *_Ctype_char) (r1 *_Ctype_struct_hid_device_) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_open_path, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_read
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_read _cgo_62402175b5df_Cfunc_hid_read
var __cgofn__cgo_62402175b5df_Cfunc_hid_read byte
var _cgo_62402175b5df_Cfunc_hid_read = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_read)

//go:cgo_unsafe_args
func _Cfunc_hid_read(p0 *_Ctype_struct_hid_device_, p1 *_Ctype_uchar, p2 _Ctype_size_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_read, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_62402175b5df_Cfunc_hid_write
//go:linkname __cgofn__cgo_62402175b5df_Cfunc_hid_write _cgo_62402175b5df_Cfunc_hid_write
var __cgofn__cgo_62402175b5df_Cfunc_hid_write byte
var _cgo_62402175b5df_Cfunc_hid_write = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc_hid_write)

//go:cgo_unsafe_args
func _Cfunc_hid_write(p0 *_Ctype_struct_hid_device_, p1 *_Ctype_uchar, p2 _Ctype_size_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc_hid_write, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}

//go:cgo_import_static _cgo_62402175b5df_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_62402175b5df_Cfunc__Cmalloc _cgo_62402175b5df_Cfunc__Cmalloc
var __cgofn__cgo_62402175b5df_Cfunc__Cmalloc byte
var _cgo_62402175b5df_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_62402175b5df_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_62402175b5df_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}

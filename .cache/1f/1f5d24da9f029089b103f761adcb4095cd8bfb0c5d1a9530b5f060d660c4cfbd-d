// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/z/go/pkg/mod/github.com/shirou/gopsutil@v3.21.11+incompatible/process/process_darwin_cgo.go:1:1
// +build darwin
// +build cgo

package process

// #include <stdlib.h>
// #include <libproc.h>
import _ "unsafe"
import (
	"context"
	"fmt"
	"unsafe"
)

func (p *Process) ExeWithContext(ctx context.Context) (string, error) {
	var c  /*line :16:8*/_Ctype_char /*line :16:14*/ // need a var for unsafe.Sizeof need a var
	const bufsize = ( /*line :17:18*/_Ciconst_PROC_PIDPATHINFO_MAXSIZE /*line :17:43*/) * unsafe.Sizeof(c)
	buffer := (* /*line :18:14*/_Ctype_char /*line :18:20*/)(( /*line :18:22*/_Cfunc__CMalloc /*line :18:29*/)( /*line :18:31*/_Ctype_size_t /*line :18:39*/(bufsize)))
	defer func() func() { _cgo0 := /*line :19:15*/unsafe.Pointer(buffer); return func() { _cgoCheckPointer(_cgo0, nil); /*line :19:38*/_Cfunc_free(_cgo0); }}()()

	ret, err := func() (_Ctype_int, error){ var _cgo0 _Ctype_int = _Ctype_int /*line :21:34*/(p.Pid); _cgo1 := /*line :21:43*/unsafe.Pointer(buffer); var _cgo2 _Ctype_uint32_t = _Ctype_uint32_t /*line :21:77*/(bufsize); _cgoCheckPointer(_cgo1, nil); return /*line :21:87*/_C2func_proc_pidpath(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return "", err
	}
	if ret <= 0 {
		return "", fmt.Errorf("unknown error: proc_pidpath returned %d", ret)
	}

	return ( /*line :29:9*/_Cfunc_GoString /*line :29:18*/)(buffer), nil
}

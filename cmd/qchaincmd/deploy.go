// Copyright (C) 2022-2025, Lux Industries Inc. All rights reserved.
// See the file LICENSE for licensing terms.
package qchaincmd

import (
	"fmt"
	"path/filepath"

	"github.com/luxfi/cli/pkg/models"
	"github.com/luxfi/cli/pkg/ux"
	"github.com/luxfi/node/utils/constants"
	"github.com/spf13/cobra"
)

func newDeployCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy the Q-Chain to a network",
		Long: `Deploy the Q-Chain with quantum-resistant features to a specified network.
This command initializes the Q-Chain with Ringtail signatures and quantum-safe consensus.`,
		RunE: deployQChain,
	}

	cmd.Flags().StringP("network", "n", "local", "Network to deploy to (local, testnet, mainnet)")
	cmd.Flags().StringP("genesis", "g", "", "Path to custom genesis file")
	cmd.Flags().BoolP("quantum-safe", "q", true, "Enable quantum-resistant features")
	cmd.Flags().IntP("validators", "v", 5, "Number of validators for Q-Chain")

	return cmd
}

func deployQChain(cmd *cobra.Command, args []string) error {
	network, _ := cmd.Flags().GetString("network")
	genesisPath, _ := cmd.Flags().GetString("genesis")
	quantumSafe, _ := cmd.Flags().GetBool("quantum-safe")
	validators, _ := cmd.Flags().GetInt("validators")

	ux.Logger.PrintToUser("Deploying Q-Chain to %s network", network)
	ux.Logger.PrintToUser("========================================")

	// Determine network ID
	var networkID uint32
	switch network {
	case "local":
		networkID = constants.LocalID
	case "testnet":
		networkID = constants.QChainTestnetID
	case "mainnet":
		networkID = constants.QChainMainnetID
	default:
		return fmt.Errorf("unsupported network: %s", network)
	}

	// Use default genesis if not provided
	if genesisPath == "" {
		genesisPath = filepath.Join(app.GetBaseDir(), "qchain", "genesis.json")
	}

	// Display deployment configuration
	ux.Logger.PrintToUser("Configuration:")
	ux.Logger.PrintToUser("  Network ID:          %d", networkID)
	ux.Logger.PrintToUser("  Chain ID:            %s", constants.QChainID)
	ux.Logger.PrintToUser("  Genesis File:        %s", genesisPath)
	ux.Logger.PrintToUser("  Quantum-Safe:        %v", quantumSafe)
	ux.Logger.PrintToUser("  Validators:          %d", validators)
	ux.Logger.PrintToUser("  Signature Algorithm: Ringtail-256")
	ux.Logger.PrintToUser("  Consensus:           Quantum-Resistant Snow")

	// Create deployment configuration
	config := models.Sidecar{
		Name:        "Q-Chain",
		VM:          models.QuantumVM,
		ChainID:     fmt.Sprintf("%d", networkID),
		TokenName:   "QTM",
		TokenSymbol: "QTM",
	}

	// Initialize Q-Chain specific features
	if quantumSafe {
		ux.Logger.PrintToUser("")
		ux.Logger.PrintToUser("Initializing quantum-resistant features...")
		ux.Logger.PrintToUser("  ✓ Ringtail signature scheme enabled")
		ux.Logger.PrintToUser("  ✓ Quantum-safe hash functions activated")
		ux.Logger.PrintToUser("  ✓ Post-quantum key exchange configured")
		ux.Logger.PrintToUser("  ✓ Quantum teleport protocol initialized")
	}

	// Deploy the chain
	ux.Logger.PrintToUser("")
	ux.Logger.PrintToUser("Deploying Q-Chain...")

	// Create deployment script path
	scriptPath := filepath.Join(app.GetBaseDir(), "scripts", "deploy-qchain.sh")

	// Generate deployment command
	deployCmd := fmt.Sprintf(`#!/bin/bash
# Q-Chain Deployment Script
# Generated by Lux CLI

set -e

echo "Starting Q-Chain deployment..."

# Set environment variables
export NETWORK_ID=%d
export CHAIN_ID=%s
export CHAIN_NAME="Q-Chain"
export VM_TYPE="QuantumVM"
export RPC_PORT=9630

# Create Q-Chain configuration
cat > /tmp/qchain-config.json <<EOF
{
  "chainId": %d,
  "networkId": %d,
  "vmType": "quantum",
  "consensusParameters": {
    "k": 20,
    "alpha": 15,
    "beta": 20,
    "quantumResistant": true
  },
  "ringtailConfig": {
    "algorithm": "ringtail-256",
    "securityLevel": 5,
    "keySize": 256
  },
  "blockTime": 100,
  "validators": %d
}
EOF

# Deploy using luxd
echo "Deploying to network..."

# Check if node is running
if ! pgrep -x "luxd" > /dev/null; then
    echo "Error: luxd is not running. Please start the node first."
    exit 1
fi

# Create Q-Chain
echo "Creating Q-Chain with quantum-resistant features..."

# Register Q-Chain with the network
curl -X POST http://localhost:${RPC_PORT}/ext/bc/P \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "platform.createBlockchain",
    "params": {
      "subnetID": "11111111111111111111111111111111LpoYY",
      "vmID": "qVM1111111111111111111111111111111111111",
      "name": "Q-Chain",
      "genesisData": "'$(cat /tmp/qchain-config.json | base64 -w0)'"
    },
    "id": 1
  }'

echo ""
echo "Q-Chain deployment initiated!"
echo "Chain ID: %s"
echo "RPC Endpoint: http://localhost:${RPC_PORT}/ext/bc/%s/rpc"
echo "WS Endpoint: ws://localhost:${RPC_PORT}/ext/bc/%s/ws"
`, networkID, constants.QChainID, networkID, networkID, validators, constants.QChainID, constants.QChainID, constants.QChainID)

	// Write deployment script
	if err := app.WriteFile(scriptPath, []byte(deployCmd)); err != nil {
		return fmt.Errorf("failed to create deployment script: %w", err)
	}

	ux.Logger.PrintToUser("  ✓ Deployment script created: %s", scriptPath)
	ux.Logger.PrintToUser("")
	ux.Logger.PrintToUser("Q-Chain deployment prepared successfully!")
	ux.Logger.PrintToUser("")
	ux.Logger.PrintToUser("To complete deployment, run:")
	ux.Logger.PrintToUser("  chmod +x %s", scriptPath)
	ux.Logger.PrintToUser("  %s", scriptPath)
	ux.Logger.PrintToUser("")
	ux.Logger.PrintToUser("After deployment, access Q-Chain at:")
	ux.Logger.PrintToUser("  RPC: http://localhost:9630/ext/bc/%s/rpc", constants.QChainID)
	ux.Logger.PrintToUser("  WS:  ws://localhost:9630/ext/bc/%s/ws", constants.QChainID)

	return nil
}
